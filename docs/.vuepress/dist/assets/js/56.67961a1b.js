(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{409:function(t,e,s){"use strict";s.r(e);var a=s(13),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",[t._v("Form Fields")]),t._v(" "),s("p",[t._v("Form Fields enable you to add new Fields to the Form Builder and manage its field settings and front-end output.")]),t._v(" "),s("h3",{attrs:{id:"register-event"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#register-event"}},[t._v("#")]),t._v(" Register Event")]),t._v(" "),s("p",[t._v("Once you have created your Custom Form Field, register your Form Field class with Sprout Forms to display your Form Field in the Form Builder.")]),t._v(" "),s("p",[t._v("Creating a custom front-end field for Sprout Forms is as easy as creating a custom field type in Craft.")]),t._v(" "),s("p",[t._v("Sprout Forms supports all fields in Craft but only supports a subset of those fields for dynamic front-end output. Fields with dynamic front-end support are referred to as "),s("em",[t._v("Standard Fields")]),t._v(". Fields that require custom HTML or development are referred to as "),s("em",[t._v("Advanced Fields")]),t._v(".")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("While you can use any type of Field on Craft 2, if the field is not supported in Sprout Forms for Craft 3, you may need to add support for it via a custom field when upgrading or find another way to capture the information you need with a supported field.")])]),t._v(" "),s("p",[t._v("While Craft can require users to use certain browsers to get the full benefits of the platform (and ignore browsers like IE8 and IE9), many client-facing websites must address broader compatibility issues to meet their goals.")]),t._v(" "),s("p",[t._v("Due to the variety and complexities of front-end user interface design and cross-browser and cross-device support, Sprout Forms does not support the complete list of native Craft fields itself, but does allow you to add support for these fields in your forms using custom HTML or adding support for additional fields via a plugin.")]),t._v(" "),s("p",[t._v("Sprout Forms provides a comprehensive API to add dynamic front-end field support for additional Craft and third-party field types.")]),t._v(" "),s("h3",{attrs:{id:"custom-front-end-fields"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#custom-front-end-fields"}},[t._v("#")]),t._v(" Custom Front-End Fields")]),t._v(" "),s("p",[t._v("To create a field that extends the Sprout Forms Front-end Field API, you'll need to do the following:")]),t._v(" "),s("div",{pre:!0},[s("ol",[s("li",[t._v("Create a "),s("strong",[t._v("field class")]),t._v(" that extends "),s("code",[t._v("SproutFormsBaseField")])]),t._v(" "),s("li",[t._v("Add the "),s("code",[t._v("getInputHtml()")]),t._v(" method to your "),s("strong",[t._v("field class")])]),t._v(" "),s("li",[t._v("Add the "),s("code",[t._v("registerSproutFormsFields()")]),t._v(" in your "),s("strong",[t._v("plugin class")])])])]),s("h3",{attrs:{id:"field-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#field-class"}},[t._v("#")]),t._v(" Field Class")]),t._v(" "),s("div",{staticClass:"split"},[s("div",{staticClass:"left"},[s("div",{pre:!0},[s("p",[t._v("The "),s("em",[t._v("field")]),t._v(" class naming convention we recommend is: "),s("code",[t._v("{PluginHandle}{FieldType}{Field}")]),t._v(".")])]),s("h4",[t._v("getInputHtml()")]),t._v(" "),s("p",[t._v("Like a back-end "),s("em",[t._v("field type")]),t._v(", your front end "),s("em",[t._v("field")]),t._v(" gets to decide what "),s("strong",[t._v("html")]),t._v(" to render to capture user input.")]),t._v(" "),s("h4",[t._v("Signature")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInputHtml")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$field")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$settings")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("array")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$renderingOptions")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$field            > The FieldModel we're providing front end rending for\n$value            > The value associated with that field type\n$settings         > The settings associated with that field type\n$renderingOptions > Options available to displayForm(), displayTab(), displayField() tags\n")])])]),s("div",{pre:!0},[s("p",[t._v("In addition to the arguments, you should make sure to return a "),s("code",[t._v("\\Twig_Markup")]),t._v(" object from this method so that your HTML is not escaped.")])]),s("h4",[t._v("beginRendering()")]),t._v(" "),s("div",{pre:!0},[s("p",[t._v("This method should be called just before your render your front end field template inside of "),s("code",[t._v("getInputHtml()")])])]),s("div",{pre:!0},[s("p",[t._v("This is due to how we're allowing the user to override "),s("code",[t._v("form")]),t._v(", "),s("code",[t._v("tab")]),t._v(", and "),s("code",[t._v("field")]),t._v(" templates for style customization.")])]),s("div",{pre:!0},[s("p",[t._v("Not calling "),s("code",[t._v("beginRendering()")]),t._v(" could cause your template to not be found.")])]),s("h4",[t._v("endRendering()")]),t._v(" "),s("p",[t._v("This method should be called just after you finish rendering your front end field template.")]),t._v(" "),s("div",{pre:!0},[s("p",[t._v("Not calling "),s("code",[t._v("endRendering()")]),t._v(" could cause your template or Sprout Forms' own templates to not be found.")])]),s("h4",[t._v("getTemplatesPath()")]),t._v(" "),s("div",{pre:!0},[s("p",[t._v("Because Sprout Forms allows the user to customize/override the default templates ("),s("code",[t._v("form.html")]),t._v(", "),s("code",[t._v("tab.html")]),t._v(", "),s("code",[t._v("field.html")]),t._v(", "),s("code",[t._v("errors.html")]),t._v("), we need to switch the template path a few times during rendering of all fields.")])]),s("p",[t._v("This method is your chance to make sure your templates are found when your field is rendered.")]),t._v(" "),s("div",{pre:!0},[s("p",[t._v("From this method, you should return the absolute path to your templates folder so that we can switch to it if you're rendering a template via "),s("code",[t._v("getInputHtml()")])])])]),t._v(" "),s("div",{staticClass:"right"},[s("div",{pre:!0},[s("p",[t._v("If we follow the instructions above, our "),s("code",[t._v("getInputHtml()")]),t._v(" and "),s("code",[t._v("getTemplatesPath()")]),t._v(" might look something like this:")])]),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInputHtml")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$field")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$settings")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("array")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$renderingOptions")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginRendering")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$rendered")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("craft")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("templates")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'plaintext/input'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'name'")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$field")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("handle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'value'")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'field'")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$field")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'settings'")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$settings")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'renderingOptions'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$renderingOptions")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("endRendering")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" TemplateHelper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRaw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$rendered")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTemplatesPath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dirname")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("__FILE__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'/myplugin/templates/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"accessing-variables-in-templates"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#accessing-variables-in-templates"}},[t._v("#")]),t._v(" Accessing variables in templates")]),t._v(" "),s("div",{pre:!0},[s("p",[t._v("If your field to be able to access variables within the template where your field is being rendered, a user can use the "),s("code",[t._v("craft.sproutForms.addFieldVariables()")]),t._v(" method to make those variables available to your field.")])]),s("h3",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),s("div",{pre:!0},[s("p",[t._v("If you'd like to take a peek at how we're using this API, you can look in the "),s("code",[t._v("craft/plugins/sproutforms/integrations")]),t._v(" folder.")])]),s("p",[t._v("All the default fields that we provide front end rendering for, are using this very API!")])])}),[],!1,null,null,null);e.default=n.exports}}]);